import boto3
import pandas as pd
import streamlit as st
import plotly.express as px
import os
import google.generativeai as genai

os.environ['GOOGLE_API_KEY'] = "Enter Your Gemini API"
genai.configure(api_key = os.environ['GOOGLE_API_KEY'])

model = genai.GenerativeModel('gemini-pro')

# Read the CSV containing product reviews
df = pd.read_csv("reviews.csv")

# Initialize the boto3 client for Amazon Comprehend
comprehend = boto3.client('comprehend', region_name='ap-south-1')

# Create a list to store sentiments
sentiment_list = []

# Loop through each review and analyze its sentiment using Amazon Comprehend
for review in df["Description"]:
    response = comprehend.detect_sentiment(Text=review, LanguageCode='en')
    sentiment_list.append(response['Sentiment'])

# Add the sentiment to the DataFrame
df['Sentiment'] = sentiment_list

# Streamlit app starts here
st.title("Amazon Product Review Sentiment Analysis")

# Create a pie chart of sentiment distribution
st.subheader("Sentiment Distribution")
sentiment_counts = df['Sentiment'].value_counts()

# Using Plotly for the pie chart
fig = px.pie(values=sentiment_counts.values, 
             names=sentiment_counts.index, 
             title='Sentiment Distribution',
             color_discrete_sequence=px.colors.qualitative.Set3)

st.plotly_chart(fig)

# Define a helper function to fetch 3 examples of each sentiment
def get_examples(sentiment_type):
    examples = df[df['Sentiment'] == sentiment_type]['Description'].head(3).tolist()
    return examples if len(examples) >= 3 else examples + ["No more reviews available"] * (3 - len(examples))

# Display sentiment examples in a horizontal layout
st.subheader("Sentiment Examples")

col1, col2, col3 = st.columns(3)

with col1:
    st.markdown("### Positive Reviews")
    for review in get_examples('POSITIVE'):
        st.write(f"- {review}")

with col2:
    st.markdown("### Negative Reviews")
    for review in get_examples('NEGATIVE'):
        st.write(f"- {review}")

with col3:
    st.markdown("### Mixed Reviews")
    for review in get_examples('MIXED'):
        st.write(f"- {review}")

# Get the sentiment percentages
positive_percentage = sentiment_counts.get('POSITIVE', 0) / sentiment_counts.sum() * 100
negative_percentage = sentiment_counts.get('NEGATIVE', 0) / sentiment_counts.sum() * 100
mixed_percentage = sentiment_counts.get('MIXED', 0) / sentiment_counts.sum() * 100

# Construct the review summary input to pass to the Gemini model
summary_input = f"""
Summarize these reviews:

Positive: {positive_percentage}% positive. Some of the positive reviews are: 
1. {get_examples('POSITIVE')[0]}
2. {get_examples('POSITIVE')[1]}
3. {get_examples('POSITIVE')[2]}

Negative: {negative_percentage}% negative. Some of the negative reviews are:
1. {get_examples('NEGATIVE')[0]}
2. {get_examples('NEGATIVE')[1]}
3. {get_examples('NEGATIVE')[2]}

Mixed: {mixed_percentage}% mixed. Some of the mixed reviews are:
1. {get_examples('MIXED')[0]}
2. {get_examples('MIXED')[1]}
3. {get_examples('MIXED')[2]}

Write a final product review based on this information.
"""

# Use the Gemini model to generate a final review
response = model.generate_content(summary_input)

# Display the final review generated by the Gemini model
st.subheader("Final Review Summary from Gemini API")
st.write(response.text)
